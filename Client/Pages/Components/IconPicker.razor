@inject IIconService _iconService;

<div class="dropdown picker">
    <a class="dropdown-toggle btn btn-light align-content-center h-100" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
        Choose Icon
    </a>
    <i class="@_selectedIcon.Value picker-button-icon-value"></i>
    <div class="dropdown-menu picker-menu" aria-labelledby="dropdownMenuButton1">
        <ul class="picker-list" style="">
            @foreach (var icon in icons)
            {
                <li class="picker-item">
                    <span class="@icon.Value picker-icon-value" @onclick="() => SelectedIconChanged(icon)"></span>
                    <span class="picker-icon-name"><i class="@icon.Value"></i>&nbsp;@icon.Name</span>
                </li>
            }
        </ul>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback<Icon> OnIconChanged { get; set; }
    private string _selectedName { get; set; } = string.Empty;
    private List<Icon> icons = [];
    private Icon _selectedIcon { get; set; } = Icon.Empty;
    protected override async Task OnInitializedAsync()
    {
        icons = await _iconService.GetIcons();

    }

    private async Task SelectedIconChanged(Icon selectedIcon)
    {
        _selectedIcon = selectedIcon;
        StateHasChanged();
        await OnIconChanged.InvokeAsync(_selectedIcon);
    }
}