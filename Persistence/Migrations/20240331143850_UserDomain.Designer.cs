// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BlazingShopContext))]
    [Migration("20240331143850_UserDomain")]
    partial class UserDomain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", "common");
                });

            modelBuilder.Entity("Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("original_price");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.ToTable("products", "common");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", "accounts");
                });

            modelBuilder.Entity("Domain.Products.Product", b =>
                {
                    b.HasOne("Domain.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_categories_category_id");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.OwnsOne("Domain.Users.Owns.Contact", "Contact", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("contact_id");

                            b1.Property<Guid>("user_id")
                                .HasColumnType("uuid")
                                .HasColumnName("user_id");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("phone");

                            b1.HasKey("Id", "user_id")
                                .HasName("pk_contacts");

                            b1.HasIndex("user_id")
                                .IsUnique()
                                .HasDatabaseName("ix_contacts_user_id");

                            b1.ToTable("contacts", "accounts");

                            b1.WithOwner()
                                .HasForeignKey("user_id")
                                .HasConstraintName("fk_contacts_users_user_id");
                        });

                    b.OwnsOne("Domain.Users.Owns.Profile", "Profile", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("profile_id");

                            b1.Property<Guid>("user_id")
                                .HasColumnType("uuid")
                                .HasColumnName("user_id");

                            b1.Property<string>("Avatar")
                                .HasColumnType("text")
                                .HasColumnName("avatar");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("last_name");

                            b1.Property<string>("Username")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("username");

                            b1.HasKey("Id", "user_id")
                                .HasName("pk_profiles");

                            b1.HasIndex("user_id")
                                .IsUnique()
                                .HasDatabaseName("ix_profiles_user_id");

                            b1.ToTable("profiles", "accounts");

                            b1.WithOwner()
                                .HasForeignKey("user_id")
                                .HasConstraintName("fk_profiles_users_user_id");
                        });

                    b.OwnsOne("Domain.Users.Owns.Security", "Security", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("security_id");

                            b1.Property<Guid>("user_id")
                                .HasColumnType("uuid")
                                .HasColumnName("user_id");

                            b1.Property<byte[]>("Password")
                                .IsRequired()
                                .HasColumnType("bytea")
                                .HasColumnName("password");

                            b1.Property<byte[]>("Salt")
                                .IsRequired()
                                .HasColumnType("bytea")
                                .HasColumnName("salt");

                            b1.HasKey("Id", "user_id")
                                .HasName("pk_security");

                            b1.HasIndex("user_id")
                                .IsUnique()
                                .HasDatabaseName("ix_security_user_id");

                            b1.ToTable("security", "accounts");

                            b1.WithOwner()
                                .HasForeignKey("user_id")
                                .HasConstraintName("fk_security_users_user_id");
                        });

                    b.Navigation("Contact")
                        .IsRequired();

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Security")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
